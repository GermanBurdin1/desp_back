import { Injectable, HttpException, HttpStatus } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { firstValueFrom } from 'rxjs';

@Injectable()
export class WhiteboardService {
	private readonly API_URL_UUID = 'https://api.netless.link/v5/rooms';
	private readonly API_URL_ROOM_TOKEN = 'https://api.netless.link/v5/tokens/rooms';
	private readonly SDK_TOKEN = 'NETLESSSDK_YWs9bHZEckhXR0x6U2VtQnZVSiZub25jZT0yOGU1MzQ1MC0wMDBkLTExZjAtOTc0NC02OTNkMTliYTBmNWYmcm9sZT0wJnNpZz1mMjE3ZDE5YjI3ODJlNTZjZTRiOWI3MGVmMDI0MmQ0N2MzNmJkZDM0ODhhMTJmOWZiMjY5ZWJlYjI5ZWRiNDUy';
	private readonly REGION = 'eu';

	constructor(private readonly httpService: HttpService) {}

	/** –°–æ–∑–¥–∞—ë—Ç –∫–æ–º–Ω–∞—Ç—É –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ—Ç Room Token */
	async createRoom(): Promise<{ roomUuid: string; roomToken: string }> {
		try {
			console.log('üì° –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É...');

			const headers = {
				token: this.SDK_TOKEN,
				region: this.REGION,
				'Content-Type': 'application/json',
			};

			const body = { isRecord: false };

			const response = await firstValueFrom(
				this.httpService.post(this.API_URL_UUID, body, { headers }),
			);

			const roomUuid = response.data.uuid;
			console.log('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, UUID:', roomUuid);

			// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
			const roomToken = await this.generateRoomToken(roomUuid, 'admin');
			console.log('‚úÖ Room Token —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω:', roomToken);

			// –¢–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è
			return { roomUuid, roomToken };
		} catch (error) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã:', error.response?.data || error.message);
			throw new HttpException('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É', HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	/** –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Room Token */
	async generateRoomToken(roomUuid: string, role: 'admin' | 'writer' | 'reader', lifespan: number = 3600): Promise<string> {
		try {
			const headers = {
				token: this.SDK_TOKEN,
				region: this.REGION,
				'Content-Type': 'application/json',
			};

			const body = {
				lifespan, 
				role, 
			};

			const response = await firstValueFrom(
				this.httpService.post(`${this.API_URL_ROOM_TOKEN}/${roomUuid}`, body, { headers }),
			);
			console.log('‚úÖ Room Token —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –≤ generatetoken:', response.data);
			return response.data;
		} catch (error) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Room Token:', error.response?.data || error.message);
			throw new HttpException('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Room Token', HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
}

